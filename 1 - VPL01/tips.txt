Git Configuration

    git config --global user.name "Your Name": Sets the username to be used when committing changes.
    git config --global user.email "youremail@example.com": Sets the email address to be used when committing changes.

Creating and Cloning Repositories

    git init: Creates a new Git repository in the current directory.
    git clone <repository-url>: Clones an existing Git repository from a remote location to the current directory.

Staging and Committing Changes

    git status: Shows the status of the working directory and staging area.
    git add <file>: Adds a file to the staging area.
    git add .: Adds all changes in the working directory to the staging area.
    git commit -m "Commit message": Commits all changes in the staging area with a commit message.
    git commit -a -m "Commit message": Commits all changes in the working directory and the staging area with a commit message.

Branching and Merging

    git branch: Lists all local branches.
    git branch <branch-name>: Creates a new branch with the given name.
    git checkout <branch-name>: Switches to the specified branch.
    git merge <branch-name>: Merges changes from the specified branch into the current branch.

Remote Repositories

    git remote add <remote-name> <remote-url>: Adds a new remote repository with the given name and URL.
    git remote -v: Lists all configured remote repositories.
    git push <remote-name> <branch-name>: Pushes the specified branch to the remote repository.
    git pull <remote-name> <branch-name>: Pulls changes from the remote repository and merges them into the current branch.

Viewing and Reverting Changes

    git log: Shows the commit history for the current branch.
    git diff: Shows the changes made since the last commit.
    git diff <commit1> <commit2>: Shows the changes between two commits.
    git checkout <commit> <file>: Reverts changes made to a file in the specified commit.

Undoing Changes

    git reset <file>: Unstages changes made to a file.
    git reset: Resets the staging area to the last commit.
    git reset --hard: Resets the working directory and staging area to the last commit.
    git revert <commit>: Creates a new commit that undoes the changes made in the specified commit.

Working with Remotes

    git fetch: Fetches changes from the remote repository, but does not merge them.
    git remote show <remote-name>: Shows information about the specified remote repository.
    git push <remote-name> :<branch-name>: Deletes the specified branch from the remote repository.
    git pull --rebase <remote-name> <branch-name>: Pulls changes from the remote repository and rebases them onto the current branch.

Tagging Releases

    git tag: Lists all existing tags.
    git tag <tag-name>: Creates a new lightweight tag with the given name.
    git tag -a <tag-name> -m "Tag message": Creates a new annotated tag with the given name and message.
    git push --tags: Pushes all tags to the remote repository.

Resolving Merge Conflicts

    git merge --abort: Aborts a merge in progress.
    git mergetool: Opens a graphical tool to help resolve merge conflicts.
    Manually edit the conflicted file(s) to resolve the conflicts, then add and commit the changes.

These are just a few of the many Git commands available, but they should cover most of the basic Git workflows. Keep in mind that Git is a powerful tool with many features and options, so it may take some time and practice to become familiar with all of its capabilities.